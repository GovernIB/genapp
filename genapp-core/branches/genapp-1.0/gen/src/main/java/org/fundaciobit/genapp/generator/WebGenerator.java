package org.fundaciobit.genapp.generator;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import org.fundaciobit.genapp.FieldInfo;
import org.fundaciobit.genapp.ForeignKey;
import org.fundaciobit.genapp.GenAppPackages;
import org.fundaciobit.genapp.Project;
import org.fundaciobit.genapp.TableInfo;
import org.fundaciobit.genapp.WebType;
import org.fundaciobit.genapp.common.query.OrderType;
import org.fundaciobit.genapp.generator.TableGenerator.ConditionalColumn;


/**
 * Title:        Rapit Entity Bean 2010
 * Description:
 * Copyright:    Copyright (c) 2014
 * Company:      XmasSoft
 * @author anadal
 * @version 1.0
 */
public class WebGenerator {
  
  public static final String WEB_PACKAGE_NAME = "webdatabase";
  
  
  public static java.util.Random randomInstance = new java.util.Random(System.nanoTime());

  public static final String NULL_IMG = "\"<img src=\\\"./images/null.gif\\\">\"";

  private static final String JAVASCRIPT_ERROR_MANAGEMENT = "<% \n"
      + "  String errorMsg;\n"
      + "  if (error != null) {\n"
      + "    errorMsg = \"onLoad=\\\"javascript:alert('\" + error.replace('\\'','`')."
      + "replace('\"','`') + \"');\\\"\";\n"
      + "  } else {\n" + "    errorMsg = \"\";\n" + "  } %>\n";

  public enum ModeWeb {
    LIST, NEW, EDIT
  };

  /**
   * 
   * @param projectName
   * @param packageName
   * @return
   */
  public static SourceFile generateWebXml(String projectName, String packageWeb) {
    return new SourceFile(
        "web.xml",
        "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n"
            + "<!--  Autogenerated File.class Do not modify    -->\n"
            + "<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\"  "
            + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
            + " xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee"
            +	" http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\" "
            + "version=\"2.4\">\n\n" + "  <display-name>" + projectName
            + "</display-name>\n" + "  <description>" + projectName
            + "</description>\n" + "  <servlet>\n"
            + "    <servlet-name>StartupServlet</servlet-name>\n"
            + "    <servlet-class>" + packageWeb + "."
            + getStatupServletName(projectName) + "</servlet-class>\n"
            + "    <load-on-startup>1</load-on-startup>\n" + "  </servlet>\n"
            + "</web-app>\n");
  }

  /**
   * 
   * @param projectName
   * @return
   */
  public static String getStatupServletName(String projectName) {
    return projectName + "StartupServlet";
  }

  public static SourceFile generateStartupServlet(String projectName,
      String packageName, String webPackName) {
    String name = getStatupServletName(projectName);
    return new SourceFile(
            name + ".java",
            "package " + webPackName + ";\n\n"
            + "import javax.servlet.*;\n"
            + "import javax.servlet.http.*;\n"
            + "import javax.naming.*;\n"
            //+ "import " + packageName + ".*;\n"
            + "\n"
            + " /**\n"
            + "  * DO NOT MODIFY THIS FILE (IT IS AUTOGENERATED).\n"
            + "  *\n"
            + "  * @author anadal\n"
            + "  *\n"
            + "  */\n"
            + "  public class " + name + " extends HttpServlet {\n"
            + "\n"
            + "    private static final long serialVersionUID =" +
            		" -8622399301396312624L;\n\n"
            + "    public " + name + "() throws NamingException {\n"
            + "    }\n"
            + "\n"
            + "    public void init(ServletConfig config) throws ServletException {\n"
            + "      super.init(config);\n" + "      "
            + getInitializationClassName(projectName) + ".init(config);\n"
            + "    }\n\n"
            + " }\n");
  }

  /**
   * 
   * @param projectName
   * @return
   */
  public static String getInitializationClassName(String projectName) {
    return projectName + "Initializations";
  }

  /**
   * 
   * @param projectName
   * @param webPackName
   * @return
   */
  public static SourceFile generateInitializationClass(String projectName,
      String packageBase, String modelPackageName, String webPackName) {
    String name = getInitializationClassName(projectName);
    String managerDB = Project.getDBManagerName(projectName);
    String managerSec = Project.getSecManagerName(projectName);
    return new SourceFile(
        name + ".java",
        "package "
      + webPackName
      + ";\n"
      + "import java.io.File;\n"
      + "import java.util.Properties;\n"
      + "import " + GenAppPackages.PKG_BASE + ".common.security.ISecurity;\n"
      + "import " + GenAppPackages.PKG_BASE + ".common.db.DataBaseInfo;\n"
      + "import " + modelPackageName + ".*;\n"
      + "import " + packageBase + ".security.*;\n"
      + "import " + packageBase + ".sqldao." + projectName + "SqlDaoManagers;\n"
      + "import javax.servlet.ServletConfig;\n"
      + "import javax.servlet.ServletException;\n"
      + "/**\n"
      + " * YOU CAN MODIFY THIS FILE.\n"
      + " *\n"
      + " * If user modify this file, then REB2010 Generator will not overwrite it.\n"
      + " *\n"
      + " * @author anadal\n"
      + " *\n"
      + " */\n"
      + "public class " + name + " {\n"
      + "\n"
      + "  /**\n"
      + "   * \n"
      + "   * @param config\n"
      + "   * @throws ServletException\n"
      + "   */\n"
      + "  public static void init(ServletConfig config) throws ServletException {\n\n"

      + "  log.info(\" ================ INIT "
      + projectName.toUpperCase() + " =====================\");\n"
      + "  \n"
      + "  try {"
      + "  \n"
      + "  File webInfDir " +
      		"= new File(config.getServletContext().getRealPath(\"WEB-INF\"));\n"
      + "  \n"
      + "  // 1.- Definir Base de dades\n"
      + "  // 1.a.- Llegir de memoria\n"
      + "  //DataBaseInfo dbInfo = " + managerDB + ".getDefaultDataBaseInfo();\n"
      + "  // 1.b.- Llegir de fitxer\n"
      + "  File dbFile = new File(webInfDir, \"database.conf\");\n"
      + "  DataBaseInfo dbInfo = " + managerDB + ".getDataBaseInfoFromFile(dbFile);\n"
      + "  // Afegir camps per MySQL\n"
      + "  Properties connProperties = new Properties();\n"
      + "  connProperties.put(\"autoReconnect\", \"true\");\n"
      + "  connProperties.put(\"maxReconnects\", \"4\");\n"
      + "  dbInfo.setProperties(connProperties);\n"
      + "  " + managerDB + ".setDataBase(dbInfo); // SET  VALUE - MOLT IMPORTANT !!!!!\n"
      + "  \n"
      + "  // 2.-Establir DAO \n"
      + "  " + projectName + "DaoManager.setDaoManagers(new " + projectName + "SqlDaoManagers());"
      + "  \n"
      + "  // 3.-Establir Seguretat \n"
      + "  ISecurity sec;\n"
      + "  \n"
      + "  // ============ DB SECURITY\n"
      + "  // Des de memoria\n"
      + "  sec = " + managerSec + ".getDefaultDBSecurity();\n"
      + "  // Des de fitxer\n"
      + "  //sec = " + managerSec + ".getDBSecurityFromFile(webInfDir); \n"
      + "  \n"
      + "  // ============ LDAP SECURITY\n"
      + "  // Des de memoria\n"
      + "  // sec = " + managerSec + ".getDefaultLDAPSecurity();\n"
      + "  // Des de fitxer\n"
      + "  //sec = " + managerSec + ".getLDAPSecurityFromFile(webInfDir);\n"
      + "  \n"
      + "  // ============ EMPTY SECURITY\n"
      + "  //sec = " + managerSec + ".getDefaultEmptySecurity();\n"
      + "  \n"
      + "  // Role per defecte\n"
      + "  try {\n"
      + "    //sec.setSecurityRoleWhenUndefined(\"ANY ROLE !!!!\");\n"
      + "    sec.setAdminRole(\"ADMIN_ROLE\"); // SET VALUE  - MOLT IMPORTANT !!!!!\n"
      + "  } catch (Exception e) {\n"
      + "    e.printStackTrace();\n"
      + "  }\n"
      + "  \n"
      + "  " + managerSec + ".setSecurity(sec); // SET VALUE  - MOLT IMPORTANT !!!!!\n"
      + "  \n"
      + "  } catch(Exception e) {"
      + "    throw new ServletException(e);" 
      + "  }\n"
      + "  \n" 
      + "  }\n" + "}\n");
  }

  public static SourceFile generateTableManager(Project project) {

    // boolean secureWeb = (project.secInfo != null);
    // final String TableManagerName = "Gestor de Taules";

    final String title = "Gestor de Taules";
    HtmlPageGenerator html = new HtmlPageGenerator(project, title);

    // table Content
    TableInfo[] tables = project.tables;
    ConditionalColumn[] columns = { new ConditionalColumn("Nom", null),
        new ConditionalColumn("Afegir", null),
        new ConditionalColumn("Llistat", null) };
    String[][] htmlCode = new String[tables.length][columns.length];
    int pos = 0;
    for (int x = 0; x < tables.length; x++) {
      if (!tables[x].isGenerate()) {
        continue;
      }
      String t = tables[x].getNameJava();
      String model = CodeGenUtils.getModelName(t);
      String label = "<fmt:message key=\"" + model + "." + model + "\"/>";
      htmlCode[pos][0] = label;
      htmlCode[pos][1] = "<a href=\"" + t
          + "_New.jsp\"><img src=\"./images/new.gif \" /> </a>";
      htmlCode[pos][2] = "<a href=\"" + t
          + "_List.jsp\"><img src=\"./images/list.gif \" /> </a>";
      pos++;
    }
    html.imports.add(GenAppPackages.PKG_BASE + ".common.security.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.query.*");
    html.tableGenerator = new MultiColumnMatrixTableGenerator(title, columns,
        htmlCode);

    html.rolesOfPage = new String[] { "getSecurity().getAdminRole()" };;

    return new SourceFile(HtmlPageGenerator.TableManagerJsp,
        html.generateHtmlPage());

  }

  private static boolean generatedRichTextJavascript = true;

  private static final String EXECUTEQUERYMETHODNAME(String projectName,
      String valueIfNull) {
    return "DataBaseUtils.executeQueryValueIfNull(" + Project.getDBManagerName(projectName)
        + ".getConnection()," + valueIfNull + ",";
  }

  public static SourceFile generateListPage(TableInfo tableInfo,
      BasicPackages packages, Project project) throws Exception{

    String table = tableInfo.getNameJava();
    //String label = tableInfo.getLabel();
    String model = CodeGenUtils.getModelName(tableInfo.getNameJava());
    String label = "<fmt:message key=\"" + model + "." + model + "\"/>";
    
    HtmlPageGenerator html = new HtmlPageGenerator(project, "Llista de "
        + label);
    // Table name
    html.tableName = tableInfo.getNameJava();
    // Imports
    html.imports.add("java.net.URLEncoder");
    html.imports.add(project.getPackageName() + ".*");
    html.imports.add(packages.modelPackage + ".*");
    html.imports.add(packages.entityPackage + ".*");
    html.imports.add(packages.fieldsPackage + ".*");    
    html.imports.add(GenAppPackages.PKG_BASE + ".common.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.db.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.security.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.query.*");
    // HTML Fields
    html.formCode.append("<%\n");
    html.formCode.append("String __orderFieldStr =" +
    		" request.getParameter(\"orderField\");\n");
    html.formCode.append("int __orderField = __orderFieldStr == null ?"
        + " 0 : Integer.parseInt(__orderFieldStr);\n");
    html.formCode
        .append("String __orderTypeStr = request.getParameter(\"orderType\");\n");
    html.formCode.append("OrderType __orderType = __orderTypeStr==null ?"
        + " OrderType.ASC : OrderType.valueOf(__orderTypeStr);\n");
    html.formCode
        .append("String __orderQueryStr = request.getParameter(\"orderQuery\");\n");
    html.formCode.append("boolean __orderQuery = __orderQueryStr == null?"
        + " false : Boolean.valueOf(__orderQueryStr);\n");
    html.formCode.append("%>\n");
    html.formCode.append("<input type=\"hidden\" name=\"orderField\""
        + " value=\"<%=__orderField%>\">\n");
    html.formCode.append("<input type=\"hidden\" name=\"orderType\""
        + " value=\"<%=__orderType%>\">\n");
    html.formCode.append("<input type=\"hidden\" name=\"orderQuery\""
        + " value=\"<%=__orderQuery%>\">\n");

    // table Content

    // generatedExecuteQueryMethod = false;
    generatedRichTextJavascript = false;

    FieldInfo[] fields = tableInfo.getFields();
    html.tableGenerator = new ListTableGenerator(html.title, project, tableInfo.getNameJava(),
        fields);

    // Javascript
    if (generatedRichTextJavascript) {
      html.javaScript.append(generateJavaScriptCodeForRichText(true));
    }

    // All page
    html.rolesOfPage = new String[] { "getSecurity().getAdminRole()" };

    String jsp = html.generateHtmlPage();

    return new SourceFile(table + "_List.jsp", jsp.toString());
  }

  public static class ListTableGenerator extends TableGenerator {

    // Project project;
    // String table;
    // FieldInfo[] fields;
    StringBuffer tableContent = new StringBuffer();

    /**
     * @param name
     * @param title
     * @param project
     * @param string
     * @param fields
     */
    public ListTableGenerator(java.lang.String title, Project project,
        String tableJavaName, FieldInfo[] fields) throws Exception {
      super(title, generateTitleColumns(tableJavaName, fields));

      // ========================
      // Generate Table Content
      // ========================

      tableContent.append("<%\n\n");
      tableContent.append("Field<?> __orderByField = " + tableJavaName + "Fields.ALL_"
          + tableJavaName.toUpperCase() + "_FIELDS[__orderField];\n");
      tableContent.append(ModelGenerator.getInterfaceName(tableJavaName) + "[] list = dao.get" + tableJavaName
          + "Manager().select(new OrderBy(__orderByField, __orderType));\n");
      tableContent.append("if (__orderQuery) { \n");

      for (int i = 0; i < fields.length; i++) {
        
        //log.info("fk.getTable() = " + tableJavaName + " | fk.getField() = " + fields[i].javaName);

        switch (fields[i].webFieldInfo.webtype) {
        case WebType.Query: {
          ForeignKey fk = fields[i].webFieldInfo.foreignKey;
          
          //log.info("fk.getTable() = " + fk.getTable() + " | fk.getField() = " + fk.getField());
          
          FieldInfo fkField = project.searchFieldInfo(fk.getTable(),
              fk.getField());
          String select = project.createSelect(fk.getTable(), fkField,
              " where " + fkField.sqlName + " = ?");
          tableContent.append("    if (__orderField == " + tableJavaName + "Fields."
              + fields[i].javaName.toUpperCase() + ".fieldID) {\n");
          tableContent.append("      DataBaseUtils.orderList("
              + Project.getDBManagerName(project.projectName)
              + ".getConnection(), list, \"" + select
              + "\", \"" + fields[i].getJavaName() + "\", __orderType);\n");
          tableContent.append("    };\n");
        }
          break;
        case WebType.UserID:
        /*
        {
          tableContent.append("    if (__orderField == " + tableJavaName + "Fields."
              + fields[i].javaName.toUpperCase() + ".fieldID) {\n");
          tableContent
              .append("      RebUtils.orderListByUserId("
                  + Project.getDBManagerName(project.projectName)
                  + ".getSecurity(), list, \""
                  + fields[i].getJavaName() + "\", __orderType);\n");
          tableContent.append("    };\n");
        }
          break;
         */
        case WebType.RoleID: /* {
          tableContent.append("    if (__orderField == " + tableJavaName + "Fields."
              + fields[i].javaName.toUpperCase() + ".fieldID) {\n");
          tableContent
              .append("      RebUtils.orderListByRoleId("
                  + Project.getDBManagerName(project.projectName)
                  + ".getSecurity(), list, \""
                  + fields[i].getJavaName() + "\", __orderType);\n");
          tableContent.append("    };\n");
        }
          break;
          */
          throw new Exception("Aquest tipus web no està suportat !!! ");

        }
      }

      tableContent.append("} // Final If\n\n\n");

      tableContent.append("for(int x = 0; x< list.length; x++) {\n");
      tableContent.append(" " + tableJavaName + " bean = list[x];\n");
      tableContent.append("%>\n");
      tableContent
          .append("<tr class=\"<%=(x % 2 == 0) ? \"odd\" : \"parell\"%>\">\n");
      String pk = "";
      for (int i = 0; i < fields.length; i++) {
        if (fields[i].isPrimaryKey()) {
          if (pk.length() != 0) {
            pk = pk + "&";
          }
          pk = pk + fields[i].getJavaName()
              + "=<%=URLEncoder.encode(String.valueOf(bean."
              + CodeGenUtils.get(fields[i]) + "))%>";
        }
      }

      
      tableContent.append("  <td><a href=\"" + tableJavaName + "_Edit.jsp?" + pk
          + "\"><img src=\"./images/edit.gif\" alt=\"Editar\" /></a></td>\n");
      
      
      tableContent
          .append("  <td><a href=\""
              + tableJavaName
              + "_Delete.jsp?"
              + pk
              + "\"><img src=\"./images/delete.gif\" alt=\"Borrar\" /> </a></td>\n");
      
      for (int i = 0; i < fields.length; i++) {
        tableContent.append("<td>"
            + getWebMapping(fields[i], ModeWeb.LIST, project) + "</td>\n");
      }
      tableContent.append(" </tr>\n");
      tableContent.append("<% } %>\n");
    }

    public static ConditionalColumn[] generateTitleColumns(String table,
        FieldInfo[] fields) {

      ConditionalColumn[] titles = new ConditionalColumn[fields.length + 2];

      titles[0] = new ConditionalColumn("&nbsp;",null);
      titles[1] = new ConditionalColumn("&nbsp;",null);
      String base = "document." + HtmlPageGenerator.FORM_NAME + ".";
      String pre = base + "orderField.value=";
      String inter = ";" + base + "orderType.value='";
      String post = "';" + base + "orderQuery.value='";
      String post2;
      boolean query;
      for (int j = 0; j < fields.length; j++) {
        query = fields[j].webFieldInfo.webtype == WebType.Query
            || fields[j].webFieldInfo.webtype == WebType.UserID
            || fields[j].webFieldInfo.webtype == WebType.RoleID;
        post2 = post + query + "'";
        String fieldID = "<%=" + table + "Fields."
            + fields[j].javaName.toUpperCase() + ".fieldID%>";
        titles[j + 2] = new ConditionalColumn(
            "<fmt:message key=\"" + CodeGenUtils.getModelName(table) + "." + fields[j].javaName + "\"/>"
            // XX
            + "[ca:" + fields[j].getLabels().get("ca") + "]"
            + "\n<input type=\"image\" onclick=\"" + pre + fieldID + inter
            + OrderType.ASC + post2 + "\" " + "src=\"./images/up.gif\" >\n"
            + "<input type=\"image\" onclick=\"" + pre + fieldID + inter
            + OrderType.DESC + post2 + "\" " + "src=\"./images/down.gif\">\n",
            null);

      }
      return titles;
    }

    @Override
    public java.lang.String getTableContent() {
      return tableContent.toString();
    }
  }

  public static String generateJavaScriptCodeForRichText(boolean readOnly) {
    StringBuffer txt = new StringBuffer("    tinyMCE.init({" + "\n"
        + "      // General options" + "\n"
        + "      mode : \"specific_textareas\",\n"
        + "      editor_selector : \"mceEditor\",\n"
        + "      language : \"ca\"," + "\n" + "      theme : \"advanced\","
        + "\n");

    if (readOnly) {
      txt.append("      readonly : true" + "\n");
    } else {
      txt.append("      setup: function(ed) {\n" +
        "          ed.onKeyUp.add(function(ed, e) {\n" +
        "              if (checks) {\n" +
        "                checks();\n" +
        "              };\n" +
        "          });\n" +
        "      },\n" +
        "      plugins : \"pagebreak,style,layer,table,save,advhr,advimage," +
    		"advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media," +
    		"searchreplace,contextmenu,paste,directionality,fullscreen,noneditable," +
    		"visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist\",\n"
        + "      // Theme options\n"
        + "      theme_advanced_buttons1 : \"newdocument,|,bold,italic,underline," +
        	"strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull," +
        	"formatselect,fontselect,fontsizeselect,help,\",\n"
        + "      theme_advanced_buttons2 : \"cut,copy,paste,pastetext,pasteword,|," +
        	"search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|," +
        	"undo,redo,|,link,unlink,anchor,image,cleanup,code,|,insertdate," +
        	"inserttime,preview,|,forecolor,backcolor\",\n"
        + "      theme_advanced_buttons3 : \"tablecontrols,|,hr,removeformat," +
        	"visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,ltr,rtl,\","
        + "\n"
        + "      theme_advanced_toolbar_location : \"top\",\n"
        + "      theme_advanced_toolbar_align : \"left\",\n"
        + "      theme_advanced_statusbar_location : \"bottom\",\n"
        + "      theme_advanced_resizing : true,\n"
        + "      template_external_list_url : \"lists/template_list.js\",\n"
        + "      external_link_list_url : \"lists/link_list.js\",\n"
        + "      external_image_list_url : \"lists/image_list.js\",\n"
        + "      media_external_list_url : \"lists/media_list.js\"\n");
    }
    txt.append("    });" + "\n");

    return txt.toString();
  }

  public static String getCalendarField(String id, String value,
      int webType, boolean isNotNullable) {
    String showsTime;
    String format;
        
    switch (webType) {
    case WebType.DateTime:
      showsTime = ",true,'24'";
      format = "ddmmyyyy";
      break;
    case WebType.Time:
      showsTime = ",true,'24',true";
      format = "hh:mm";
      break;
    case WebType.Date:
    default:
      showsTime = "";
      format = "ddmmyyyy";
    }

    return "<table border=0 cellspacing=0 cellpadding=0>\n" + "<tr>\n"
        + "  <td>\n"
        + "    <input type=\"text\" " + (isNotNullable ? " onfocus=\"checks()\"" : "")
        + " name=\"" + id + "\" id=\"" + id
        + "\" value=\"" + value
        + "\" readonly />\n"
        + "</td>\n"
        + "<td valign=\"middle\">\n"        
        + "&nbsp;<img border=\"0\" src=\"calendar/cal.gif\""
        + " onclick=\"javascript:NewCssCal" +
        		"('" + id + "','" + format+ "','arrow'" + showsTime + ")\""
        + " style=\"cursor: pointer;\" />\n"
        + "  </td>\n"
        + "</tr>\n" + "</table>\n";
  }

  /**
   * 
   * @param tableInfo
   * @param packageDB
   * @param project
   * @return
   */
  public static SourceFile generateEditPage(TableInfo tableInfo,
      BasicPackages packages, Project project) throws Exception  {
    String table = tableInfo.getNameJava();
    //String label = tableInfo.getLabel();
    String model = CodeGenUtils.getModelName(tableInfo.getNameJava());
    String label = "<fmt:message key=\"" + model + "." + model + "\"/>";
    
    // TODO XXX
    String pageTitle = "Editar Element de la Taula " + label;
    String buttonTitle = "Guardar";

    ModeWeb webMode = ModeWeb.EDIT;

    FieldInfo[] fields = tableInfo.getFields();

    // EDIT Code
    boolean added = false;

    StringBuffer requestGetParameter = new StringBuffer();
    StringBuffer createParams = new StringBuffer();
    StringBuffer checkPK = new StringBuffer();
    
    StringBuffer replaceURL = new StringBuffer();
    int countPK = 0;

    for (int i = 0; i < fields.length; i++) {
      String request = "request.getParameter(\"" + fields[i].javaName + "\")";
      String value = Converter.toJavaValue(fields[i], request);

      if (fields[i].isPrimaryKey()) {
        if (added) {
          createParams.append(" , \n ");
        }
        added = true;
        createParams.append(value);

        checkPK.append(" if(" + request + " == null) {\n");
        checkPK.append("   error = \"No puc obtenir el par�metre '"
            + fields[i].javaName + "'\";\n");
        checkPK.append(" }\n");

        String strValue = Converter.toStringValue(fields[i].getJavaType(), "bean."
            + CodeGenUtils.get(fields[i]), webMode);
        replaceURL.append("        __tmp = __tmp.replace(\"$$PK" + countPK
            + "$$\"," + strValue + ");\n");
        countPK++;
      }
      requestGetParameter.append("      __bean."
          + CodeGenUtils.set(fields[i].javaName) + "(" + value + ");\n");

    }

    String javaCode = "<%\n" + "  " + table + " bean;\n"
        + "  String redirectUrl = request.getParameter(\"redirectUrl\");\n"
        + "  String error = request.getParameter(\"infoMessage\");\n" + checkPK.toString()
        + "  if (request.getParameter(\"loadedPage\") != null) {\n"
        + "    try {\n" + "      " + table + "Bean __bean = new " + table
        + "Bean();\n" + requestGetParameter.toString()
        + "      bean = __bean;\n"
        + "      dao.get" + table  + "Manager().update(__bean);\n"
        /*
         * + "      bean = new " + table + "ReadDB(" + createParams.toString() +
         * ");\n" + requestGetParameter.toString()
         */
        + "      if (redirectUrl != null) {\n"
        + "        String __tmp = java.net.URLDecoder.decode(redirectUrl);\n"
        + replaceURL.toString()
        + "        response.sendRedirect(__tmp);\n"
        + "      } else {"
        + "        error = \"Element actualitzat correctament.\";"
        + "      }\n" + "    } catch(Exception e) {\n"
        + "      error = e.getMessage();\n" + "    }\n"
        + "  } // Final If Edit\n" 
        + "  bean = dao.get" + table + "Manager().findByPrimaryKey(" + createParams.toString() + ");\n"
        + "  \n" + "%>\n";

    String formCode = "   <% if (redirectUrl != null) { %>\n"
        + "   <input type=\"hidden\" name=\"redirectUrl\" value=\"<%=redirectUrl%>\">\n"
        + "   <% } %>\n";

    StringBuffer jsp = generateNewOrEditJsp(packages, project, pageTitle,
        buttonTitle, webMode, tableInfo, javaCode, formCode);
    return new SourceFile(table + "_Edit.jsp", jsp.toString());
  }

  /**
   * 
   * @param tableInfo
   * @param packageDB
   * @param project
   * @return
   */
  public static SourceFile generateDeletePage(Project project,
      TableInfo tableInfo, String modelPackage //, String daoPackage
      ) {
    String tableName = tableInfo.getNameJava();

    // Delete Code
    FieldInfo[] fields = tableInfo.getFields();
    boolean added = false;

    StringBuffer createParams = new StringBuffer();
    StringBuffer checkPK = new StringBuffer();

    for (int i = 0; i < fields.length; i++) {
      String request = "request.getParameter(\"" + fields[i].javaName + "\")";
      String value = Converter.toJavaValue(fields[i], request);

      if (fields[i].isPrimaryKey()) {
        if (added) {
          createParams.append(" , \n ");
        }
        added = true;
        createParams.append(value);

        checkPK.append(" if(" + request + " == null) {\n");
        checkPK.append("   error = \"No puc obtenir el par�metre \\'"
            + fields[i].javaName + "\\'\";\n");
        checkPK.append(" }\n");
      }
    }

    String javaCode = "<%\n" + "  String error = null;\n"
        + "  String redirectUrl = request.getParameter(\"redirectUrl\");\n"
        + checkPK.toString()
        + "  if (error == null) {\n"
        + "    try {\n"
        + "      dao.get" + tableName + "Manager().delete("
        + createParams.toString()
        + ");\n"
        + "      if (redirectUrl != null) {\n"
        + "        response.sendRedirect(java.net.URLDecoder.decode(redirectUrl));\n"
        + "      } else {"
        + "        error = \"Element borrat correctament.\";\n"
        + "      }\n"
        + "    } catch(Exception e) {\n\n"
        + "      error = e.getMessage();\n" + "    }\n" + "  } \n" + "%>\n";

    String model = CodeGenUtils.getModelName(tableInfo.getNameJava());
    String label = "<fmt:message key=\"" + model + "." + model + "\"/>";
    
    String title = "Borrar Element de la Taula " + label;
    HtmlPageGenerator html = new HtmlPageGenerator(project, title);
    html.tableName = tableName;
    html.imports.add(GenAppPackages.PKG_BASE + ".common.security.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.query.*");
    html.imports.add(modelPackage + ".*");
    //html.imports.add(daoPackage + ".*");
    html.onLoad = "<%=errorMsg%>";
    html.rolesOfPage = new String[] { "getSecurity().getAdminRole()" };
    // Imports
    

    StringBuffer jsp = new StringBuffer(javaCode);
    jsp.append(JAVASCRIPT_ERROR_MANAGEMENT);
    jsp.append(html.generateHtmlPage());

    return new SourceFile(tableName + "_Delete.jsp", jsp.toString());
  }

  /**
   * 
   * @param tableInfo
   * @param daoPackage
   * @param project
   * @return
   */
  public static SourceFile generateAddPage(TableInfo tableInfo, BasicPackages packages,
      Project project) throws Exception {

    String table = tableInfo.getNameJava();
    //String label = tableInfo.getLabel();
    String model = CodeGenUtils.getModelName(tableInfo.getNameJava());
    String label = "<fmt:message key=\"" + model + "." + model + "\"/>";
    String pageTitle = "Afegir element dins " + label;
    String buttonTitle = "Afegir";

    ModeWeb webMode = ModeWeb.NEW;

    FieldInfo[] fields = tableInfo.getFields();

    // Add Code
    boolean added = false;

    StringBuffer requestGetParameter = new StringBuffer();
    StringBuffer createParams = new StringBuffer();
    StringBuffer primaryKeys = new StringBuffer();
    
    StringBuffer replaceURL = new StringBuffer();
    int countPK = 0;

    for (int i = 0; i < fields.length; i++) {
      if (fields[i].isPrimaryKey()) {
        if (primaryKeys.length() > 0) {
          primaryKeys.append("+ \"&");
        }
        String value = Converter.toStringValue(fields[i].getJavaType(), "bean."
            + CodeGenUtils.get(fields[i]), webMode);
        primaryKeys.append(fields[i].javaName
            + "=\" + URLEncoder.encode(" + value + ")");
        
        replaceURL.append("        __tmp = __tmp.replace(\"$$PK" + countPK
            + "$$\"," + value + ");\n");
        countPK++;
      }
      if (fields[i].isAutoIncrement) {
        continue;
      }
      if (added) {
        createParams.append(", ");
        if ((i + 1) % 4 == 0) {
          createParams.append("\n ");
        }
      }
      added = true;
      String value = Converter.toJavaValue(fields[i], "request.getParameter(\""
          + fields[i].javaName + "\")");
      createParams.append("bean." + CodeGenUtils.get(fields[i]));
      requestGetParameter.append("bean." + CodeGenUtils.set(fields[i].javaName)
          + "(" + value + ");\n");
      
      
    }

    String javaCode = "<%\n" + "  " + table + " bean;\n"
        + "  String error = null;\n"
        + "  String redirectUrl = request.getParameter(\"redirectUrl\");\n"
        + "  bean = new " + table + "Bean();\n"
        + requestGetParameter.toString()
        + "  if (request.getParameter(\"loadedPage\") != null) {\n"
        + "    try {\n"
        + "      bean = dao.get" + table + "Manager().create("
        + createParams.toString()
        + ");\n"
        + "      if (redirectUrl != null) {\n"
        + "        String __tmp = java.net.URLDecoder.decode(redirectUrl);\n"
        + replaceURL.toString()
        + "        response.sendRedirect(__tmp);\n"
        + "      } else {"
        + "          response.sendRedirect(\"" + table + "_Edit.jsp?"
        + primaryKeys.toString() + ");\n" 
        + "      }\n"
        + "    } catch(Exception e) {\n" + "      error = e.getMessage();\n"
        + "    }\n" + "  } // Final If Create\n" + "%>\n";

    String formCode = "   <% if (redirectUrl != null) { %>\n"
        + "   <input type=\"hidden\" name=\"redirectUrl\" value=\"<%=redirectUrl%>\">\n"
        + "   <% } %>\n";
    StringBuffer jsp = generateNewOrEditJsp(packages, project, pageTitle,
        buttonTitle, webMode, tableInfo, javaCode, formCode);
    return new SourceFile(table + "_New.jsp", jsp.toString());
  }

  /**
   * 
   * @param daoPackage
   * @param project
   * @param name
   * @param button
   * @param webMode
   * @param fields
   * @param javaCode
   * @return
   */

  private static StringBuffer generateNewOrEditJsp(BasicPackages packages, 
      Project project, String title, String buttonTitle, ModeWeb webMode,
      TableInfo tableInfo, String javaCode, String formCode) throws Exception {

    HtmlPageGenerator html = new HtmlPageGenerator(project, title);

    html.formCode.append(formCode);

    // Imports
    html.imports.add("java.net.URLEncoder");
    html.imports.add(project.getPackageName() + ".*");
    html.imports.add(packages.modelPackage + ".*");
    html.imports.add(packages.entityPackage + ".*");
    html.imports.add(packages.beanPackage + ".*");
    html.imports.add(packages.fieldsPackage + ".*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.security.*");    
    html.imports.add(GenAppPackages.PKG_BASE + ".common.query.*");
    html.imports.add(GenAppPackages.PKG_BASE + ".common.db.*");

    // generatedExecuteQueryMethod = false;
    generatedRichTextJavascript = false;

    // Table content
    FieldInfo[] fields = tableInfo.getFields();
    String[] columns = { "Nom", "Valor" };
    String[][] values = new String[fields.length][columns.length];
    for (int i = 0; i < fields.length; i++) {
      values[i][0] = 
        //fields[i].getLabel()
        "<fmt:message key=\"" + tableInfo.nameJava + "." + fields[i].javaName + "\"/>"
        // XX
        + "[ca:" + fields[i].getLabels().get("ca") + "]"
          + (fields[i].isNotNullable ? " (*)" : "");
      values[i][1] = getWebMapping(fields[i], webMode, project);
    }

    html.tableGenerator = new MatrixTableGenerator(html.title,
        TableGenerator.columnString2ConditionalColumns(columns), values);

    // Javascript- Add RichText??
    if (generatedRichTextJavascript) {
      html.javaScript.append(generateJavaScriptCodeForRichText(false));
    }

    // Submit-Button
    html.submitButton = new Button(buttonTitle, "checks()");

    // Check function
    html.javaScript.append("\n\nfunction checks() {\n");
    for (int i = 0; i < fields.length; i++) {
      String js = genJavascript(fields[i], webMode);
      if (js != null) {
        html.javaScript.append(js);
      }
    }
    html.javaScript.append("  document." + HtmlPageGenerator.FORM_NAME + "."
        + HtmlPageGenerator.SUBMITBUTTON + ".disabled = false;\n");
    html.javaScript.append("}\n\n");

    // Security Level
    if (webMode == ModeWeb.EDIT) {
      html.rolesOfPage = new String[] { "getSecurity().getAdminRole()" };
    } else {
      html.rolesOfPage = new String[] { "getSecurity().getAdminRole()" };
    }

    // Generate
    html.onLoad = "<%=errorMsg%>";
    html.tableName = tableInfo.nameJava;

    StringBuffer jsp = new StringBuffer(javaCode);
    jsp.append(JAVASCRIPT_ERROR_MANAGEMENT);
    jsp.append(html.generateHtmlPage());
    return jsp;
  }

  /**
   * 
   * @param field
   * @return
   */
  public static String generateIsEmptyJavascript(String field) {
    String FORM_NAME = HtmlPageGenerator.FORM_NAME;
    return "  if (document." + FORM_NAME + "." + field + ".value==null ||"
        + " document." + FORM_NAME + "." + field + ".value.length==0) {\n"
        + "    document." + FORM_NAME + "." + HtmlPageGenerator.SUBMITBUTTON
        + ".disabled = true;\n"
        // + "  alert(\"El camp " + field + " no pot estar buit.\");\n"
        + "    return;\n" + "  }\n";
  }

  /**
   * @param field
   * @param mode
   * @return
   */
  public static String genJavascript(FieldInfo field, ModeWeb mode) throws Exception {
    int webType = field.webFieldInfo.webtype;
    String otherChecks = "";
    switch (webType) {
    
    case WebType.RoleID:
    case WebType.UserID:
      throw new Exception("Aquest tipus web no està suportat !!! " + field.getJavaName() );
      

    case WebType.PrimaryKey:
      if (field.isAutoIncrement && mode == ModeWeb.NEW) {
        return null;
      } else {
        return generateIsEmptyJavascript(field.javaName);
      }


    case WebType.Query:
      if (field.isNotNullable) {
        String item = "document." + HtmlPageGenerator.FORM_NAME + "."
            + field.javaName;
        return "     var selIndex_" + field.javaName + " = " + item
            + ".selectedIndex;\n" + "     var value_" + field.javaName + " = "
            + item + ".options[selIndex_" + field.javaName + "].value;\n"
            + "     if (value_" + field.javaName + "==null || value_"
            + field.javaName + ".length==0) {\n" + "       document."
            + HtmlPageGenerator.FORM_NAME + "."
            + HtmlPageGenerator.SUBMITBUTTON + ".disabled = true;\n"
            + "       return;\n" + "     };\n";
      } else {
        return null;
      }

    case WebType.Integer:
    case WebType.Decimal:
      otherChecks = "    check" + webType + "(document."
          + HtmlPageGenerator.FORM_NAME + "." + field.javaName + ");\n";
    case WebType.URL:
    case WebType.File:
    case WebType.Text:
    case WebType.TextArea:
      if (field.isNotNullable) {
        otherChecks = otherChecks + generateIsEmptyJavascript(field.javaName);
      }
      return otherChecks;
      
    case WebType.RichText:
      if (field.isNotNullable) {
        otherChecks += "\n   if(check_" + field.javaName + "()) { return; };\n\n";
      }
      return otherChecks;

    case WebType.Date:
    case WebType.DateTime:
    case WebType.Time:
      if (field.isNotNullable) {
        return generateIsEmptyJavascript(field.javaName);
      } else {
        return null;
      }

    case WebType.Checkbox:
      return null;

    default:
      return "alert(\"Unknow type " + webType
          + " generating JavaScript.\"); return;\n";
    }

  }

  public static String getWebMapping(FieldInfo field, ModeWeb mode,
      Project project) throws Exception {

    int webType = field.webFieldInfo.webtype;

    switch (webType) {
    case WebType.Checkbox: {
      return "<INPUT NAME=" + field.getJavaName() + " type=\"checkbox\" "
          + " <%=bean." + CodeGenUtils.get(field)
          + "?\"checked\":\"\"%> " + (mode == ModeWeb.LIST ? "DISABLED" : "")
          + " >\n";
    }

    case WebType.Date:
    case WebType.DateTime:
    case WebType.Time: {
      switch (mode) {
      case LIST:
        return "<%="
            + Converter.toStringValue(field.getJavaType(),
                "bean." + CodeGenUtils.get(field), mode) + "%>";
      case EDIT:
      default:
      case NEW:
        return getCalendarField(
            field.getJavaName(),
            "<%="
                + Converter.toStringValue(field.getJavaType(), "bean."
                    + CodeGenUtils.get(field), mode) + "%>", webType,
            field.isNotNullable);
      }
    }

    case WebType.PrimaryKey:
      switch (mode) {
      case LIST:
      case EDIT:
        return "<input type=hidden name=" + field.getJavaName()
            + " value=\"<%=bean." + CodeGenUtils.get(field)
            + "%>\" ><%=bean." + CodeGenUtils.get(field) + "%>";
      default:
      case NEW:
        if (field.isAutoIncrement) {
          return "<b>Autoincrement Field</b>";
        } else {
          return "<input type=\"text\" onkeyup=\"checks()\" name=\""
              + field.getJavaName()
              + "\" value=\"<%="
              + Converter.toStringValue(field.getJavaType(),
                  "bean." + CodeGenUtils.get(field), mode) + "%>\" >";
        }
      }

    case WebType.Query: {
      ForeignKey fk = field.webFieldInfo.foreignKey;
      FieldInfo fkField = project.searchFieldInfo(fk.getTable(), fk.getField());

      switch (mode) {
      case LIST:
        String select = project.createSelect(fk.getTable(), fkField, " where "
            + fkField.sqlName + " = ?");
        return ("<%=" + EXECUTEQUERYMETHODNAME(project.projectName, NULL_IMG)
            + "\"" + select + "\",bean." + CodeGenUtils.get(field) + ")%>");
      case EDIT:
      case NEW:
      default:
        return generateSelectHtml(project, field, fk, fkField);
      }
    }

    case WebType.TextArea: {
      switch (mode) {
      case LIST:
        return "<% if (bean."
            + CodeGenUtils.get(field)
            + " == null) { %>\n"
            + "&nbsp;\n"
            + "<% } else { %>\n"
            + "   <textarea readonly style=\"overflow:auto;\"" +
            		" rows=\"1\" cols=\"20\"><%=bean."
            + CodeGenUtils.get(field) + "%></textarea>" + "<% } %>";
      case EDIT:
      default:
      case NEW:
        return "<textarea rows=\"2\" cols=\"80\" name=\""
            + field.getJavaName()
            + "\"><%="
            + Converter.toStringValue(field.getJavaType(),
                "bean." + CodeGenUtils.get(field) + "", mode)
            + "%></textarea>";
      }
    }

    case WebType.RichText: {
      String name = field.getJavaName();
      String random;
      switch (mode) {
      case LIST:
        random = "<%=java.lang.Math.abs(" +
        		"new java.util.Random(System.nanoTime()).nextInt())%>"; 
        generatedRichTextJavascript = true;
        return "<% if (bean." + CodeGenUtils.get(field)
            + " == null) { %>\n" + "&nbsp;\n" + "<% } else { %>\n"
            + "   <textarea id=\"" + random
            + "\" class=\"mceEditor\" rows=\"1\" cols=\"20\"><%=bean."
            + CodeGenUtils.get(field) + "%></textarea>" + "<% } %>";
      case EDIT:
      default:
      case NEW:
        
        random = String.valueOf(java.lang.Math.abs(randomInstance.nextInt()));
        generatedRichTextJavascript = true;
        
        String onKeyUp = "";
        if (field.isNotNullable) {
          onKeyUp = "<script type=\"text/javascript\">\n" +
          /*
            "var previousOnload = window.onload;\n" +
            "window.onload = function() {\n" +
            "    if (previousOnload) {\n" +
            "        previousOnload();\n" +
            "    }\n" +
            "var ed = tinyMCE.get('" + random + "');\n" +   
            "    ed.onKeyUp.add(function(ed, e) {\n" +
            "   checks();\n" +
            "});\n" +
            "}\n" +
           */ 
            "function check_" + name + "() {\n" +
            "  var value = tinyMCE.get('" + random + "').getContent();\n" +
            "  if (value==null || value.length==0) {\n" +
            "    document.REB2010.SubmitButton.disabled = true;\n" +
            "    return true;\n" +
            "  }\n" +
            "  return false;\n" +
            "}\n" +
            "</script>\n";            
        }

        return "<table class=\"dummy\" style=\"background-color:white;\">\n"
            + "  <tr class=\"dummy\"  style=\"background-color:white;\">\n"
            + "   <td class=\"dummy\" style=\"background-color:white;\">\n"
            + "    <textarea id=\"" + random + "\" class=\"mceEditor\""
            + " rows=\"2\" cols=\"80\"  name=\"" + name
            + "\"><%=" + Converter.toStringValue(field.getJavaType(),
                "bean." + CodeGenUtils.get(field) + "", mode)
            + "%></textarea>"
            + onKeyUp
            + "   </td>\n"
            + "  </tr>"
            + "</table>";
      }
    }

    case WebType.RoleID:
      throw new Exception("Aquest tipus web no està suportat !!! " + field.getJavaName());
      /*
      /*
      switch (mode) {
      case LIST:
        return "<% if (bean." + CodeGenUtils.get(field)
            + " == null) {%>\n" + "<%=" + NULL_IMG + "%>\n" + "<% } else {"
            + "  ISecurity __security = "
            + Project.getSecManagerName(project.projectName) + ".getSecurity();\n"
            + "  String fn = __security.getFullNameOfRole(bean."
            + CodeGenUtils.get(field) + ");%>\n"
            + "  <%=(fn == null) ? " + NULL_IMG + " : fn %>\n" + "<% } %>\n";
      case EDIT:
      default:
      case NEW:
        //String id = ;
        String txt = "<select name=\""
            + field.getJavaName()
            + "\" "
            + (field.isNotNullable ? " onchange=\"checks()\"" : "")
            + " >\n"
            + "<option value=\"\" >=== No Definit ===</option>\n"
            + "<% {\n"
            + "  ISecurity __security = "
            + Project.getSecManagerName(project.projectName)
            + ".getSecurity();\n"
            + "  java.util.List<KeyValue<String>> __roles" +
            		" = __security.getAllRoleNames();\n"
            + "  String __def;\n"
            + "  for(KeyValue<String> kv : __roles) {\n"
            + "    __def = RebUtils.equals(kv.key, bean."
            + CodeGenUtils.get(field)
            + ") ? \"selected\" : \"\";\n"
            + "  %>\n"
            + "     <option value=\"<%=kv.key%>\" <%=__def%> ><%=kv.value%></option>\n"
            + "<% } %>\n" + "<% } %>\n" + "</select>\n";
        return txt;
      }
      */

      
    case WebType.UserID:
      throw new Exception("Aquest tipus web no està suportat !!! " + field.getJavaName());
      /*
      switch (mode) {
      case LIST:
        return "<% if (bean." + CodeGenUtils.get(field)
            + " == null) {%>\n" + "<%=" + NULL_IMG + "%>\n" + "<% } else {"
            + "  ISecurity __security = "
            + Project.getSecManagerName(project.projectName) + ".getSecurity();\n"
            + "  String fn = __security.getFullNameOfUser(bean."
            + CodeGenUtils.get(field) + ");%>\n"
            + "  <%=(fn == null) ? " + NULL_IMG + " : fn %>\n" + "<% } %>\n";
      case EDIT:
      default:
      case NEW:
        
        String txt = "<select name=\""
            + field.getJavaName()
            + "\" "
            + (field.isNotNullable ? " onchange=\"checks()\"" : "")
            + " >\n"
            + "<option value=\"\" >=== No Definit ===</option>\n"
            + "<% {\n"
            + "  ISecurity __security = "
            + Project.getSecManagerName(project.projectName)
            + ".getSecurity();\n"
            + "  java.util.List<KeyValue<String>> __users" +
            		" = __security.getAllUserNames();\n"
            + "  String __def;\n"
            + "  for(KeyValue<String> kv : __users) {\n"
            + "    __def = RebUtils.equals(kv.key, bean."
            + CodeGenUtils.get(field)
            + ") ? \"selected\" : \"\";\n"
            + "  %>\n"
            + "     <option value=\"<%=kv.key%>\" <%=__def%> ><%=kv.value%></option>\n"
            + "<% } %>\n" + "<% } %>\n" + "</select>\n";
        return txt;
      }
      */

    case WebType.File: {
      String txt = "";
      switch (mode) {
      case LIST:
        // 'field.webFieldInfo.getLabel()[0]' contains the folder
        // name where store the files of thsi field
        txt = "<% if (bean." + CodeGenUtils.get(field)
            + " != null) { %> " + "<a href=\"<%=\""
            + field.webFieldInfo.getLabel()[0] + "/\" + bean."
            + CodeGenUtils.get(field) + "%>\"><%=bean."
            + CodeGenUtils.get(field) + "%></a> <% } %>";
        break;
      case EDIT:
        txt = txt + "<% if (bean." + CodeGenUtils.get(field)
            + " != null) { %> " + "Current: <%=bean."
            + CodeGenUtils.get(field) + "%><% } %>\n" + "";
      case NEW:
        txt = txt + "<input type=\"file\" name=\"" + field.getJavaName()
            + "\">";
      }
      return txt;
    }

    default:
    case WebType.Integer:
    case WebType.Decimal:
    case WebType.URL:
    case WebType.Text: {
      switch (mode) {
      case LIST:
        if (webType == WebType.URL) {
          return "<% if (bean." + CodeGenUtils.get(field)
              + " != null) {%>\n" + "<a href=\"<%=bean."
              + CodeGenUtils.get(field)
              + "%>\" target=\"_blank\"><%=bean."
              + CodeGenUtils.get(field) + "%></a>\n" + "<% } %>\n";
        } else {
          return "<%="
              + Converter.toStringValue(field.getJavaType(),
                  "bean." + CodeGenUtils.get(field) + "", mode)
              + "%>";
        }
      case EDIT:
      default:
      case NEW:
        String sizes = "";
        if (field.getSize() != null) {
          String size = field.getSize().toString();
          sizes = "maxlength=\"" + size + "\" size=\""
              + Math.min(80, Integer.parseInt(size)) + "\"";
        }
        return "<input type=\"text\" name=\"" + field.getJavaName()
            + "\" " + sizes + " onkeyup=\"checks()\" \n"
            + " value=\"<%="
            + Converter.toStringValue(field.getJavaType(),
                "bean." + CodeGenUtils.get(field) + "", mode)
            + "%>\" >";
      }
    }
    }
  }

  private static String generateSelectHtml(Project project, FieldInfo field, ForeignKey fk,
      FieldInfo fkField) throws Exception {

    StringBuffer values = new StringBuffer("<%\n");
    values.append("Object _obj_;\n");
    values.append("StringBuffer values_" + field.getJavaName()
        + " = new StringBuffer();\n");
    String[] labels = fkField.webFieldInfo.getLabel();
    StringBuffer order = new StringBuffer();
    if (labels != null) {
      for (int i = 0; i < labels.length; i++) {
        if (i != 0) {
          values.append(" values_" + field.getJavaName() + ".trimToSize();");
          values.append(" values_" + field.getJavaName() + ".append(\" \");");
          order.append(", ");
        }
        values.append("_obj_ = items_" + field.getJavaName() + "[i]."
            + CodeGenUtils.get(labels[i].trim()) + ";\n");
        values.append("if(_obj_ != null) {\n");
        values.append("  values_" + field.getJavaName() + ".append(_obj_);\n");
        values.append("}\n");
        order
            .append(getJavaTableName(project,fk.getTable()) + "Fields." + labels[i].trim().toUpperCase());
      }
    }
    values.append("%>\n");

    String selectCode = "<% " + field.getJavaType().getName() + " selected_"
        + field.getJavaName() + " = bean." + CodeGenUtils.get(field)
        + "; %>\n" + "<select "
        + (field.isNotNullable ? " onchange=\"checks()\"" : "") + " name=\""
        + field.getJavaName() + "\">\n"
        + "   <option value=\"\" >=== No Definit ===</option>\n" + "<% "
        + getJavaTableName(project,fk.getTable()) + "[] items_" + field.getJavaName() + " = dao.get"
        + getJavaTableName(project,fk.getTable()) + "Manager().select(" + order.toString()
        + ");\n"

        + "    for (int i = 0; i < items_" + field.getJavaName()
        + ".length; i++) { %>" + values.toString()
        + "   <option value=\"<%=items_" + field.getJavaName() + "[i]."
        + CodeGenUtils.get(fk.getField().trim())
        + "%>\" <%=" + GenAppPackages.PKG_BASE + ".common.RebUtils.equals(items_"
        + field.getJavaName() + "[i]." + CodeGenUtils.get(fk.getField().trim())
        + ",selected_" + field.getJavaName() + ")?\"selected\":\"\"%> >"
        + "<%= values_" + field.getJavaName() + ".length() < 51 ? values_"
        + field.getJavaName() + " : (values_" + field.getJavaName()
        + ".substring(0,50) + \" ...\") %></option>\n" + "<% } %>"
        + "</select>";
    return selectCode;

  }

  
  public static String getJavaTableName(Project project, String tableName) throws Exception {
    
    for (TableInfo table : project.tables) {
      if (table.name.equals(tableName)) {
        return table.nameJava;
      }
    }
    
    throw new Exception("No s'ha trobat el nom JAVA dde la taule " + tableName);
    
  }
  
  

  public static SourceFile generateSecurityInfoJsp(Project project) {
    final String javaCode = "<%@page extends=\"" + getJspBaseName(project)
        + "\"%>";
    return new SourceFile("SecurityInfo.jsp", javaCode);
  }

  public static String getJspBaseName(Project project) {
    return project.getPackageName() + "." + WebGenerator.WEB_PACKAGE_NAME
        + "." + project.projectName + "JspBase";
  }

  public static SourceFile generateJspBase(Project project, String packageServlet) {

    String javaCode = "package " + packageServlet + ";\n"
        + "/*\n"
        + "  YOU CAN MODIFY THIS CLASS\n"
        + "  IF GENERATOR SEE THAT YOU HAS MODIFIED THIS CLASS" +
        		" THEN DO NOT OVERWRITE IT. Thanks.\n"
        + "\n"
        + "*/\n"
        + "public abstract class " + project.projectName + "JspBase \n"
        + "  extends "
        + packageServlet + "." + project.projectName + "AbstractJspBase {\n"
        + "\n"
        + "}\n";
    return new SourceFile(project.projectName + "JspBase.java", javaCode);
  }

  public static SourceFile generateAbstractJspBase(Project project,
      String webPackage, String modelPackage) {

    String managerSec = project.getPackageName() + ".security."
        + Project.getSecManagerName(project.projectName);

    String javaCode = "package " + webPackage + ";" + "\n"    
        + "import javax.servlet.ServletException;\n"
        + "import javax.servlet.ServletConfig;\n"       
        + "import " + modelPackage + ".*;\n"    
        + "import " + GenAppPackages.PKG_BASE + ".common.security.ISecurity;" + "\n"
        + "import " + GenAppPackages.PKG_BASE + ".common.REB2010JspBase;" + "\n" + "/*"
        + "\n" + "  PLEASE DO NOT OVERWRITE THIS FILE !!!!!" + "\n"
        + "  PLEASE MODIFY THE CLASS " + webPackage + "."
        + project.projectName + "JspBase. Thanks." + "\n" + "   " + "\n" + "*/"
        + "\n" + "public abstract class " + project.projectName
        + "AbstractJspBase extends REB2010JspBase {" + "\n"
        + "\n"
        + "  private static final long serialVersionUID = 2238238912964922753L;\n\n"
        + "  protected ISecurity security;\n"
        + "  protected I" + project.projectName + "DaoManagers dao;\n\n"
        + "  /** \n" 
        + "  * @param config\n"
        + "  * @throws ServletException\n"
        + "  */\n"
        + "  public void init(ServletConfig config) throws ServletException {\n"
        + "    super.init(config);\n"
        + "    try {\n"
        + "      dao = " + project.projectName + "DaoManager.getDaoManagers();\n"
        + "      security = " + managerSec + ".getSecurity();\n"
        + "    } catch (Exception e) {\n"
        + "      e.printStackTrace();\n"
        + "      throw new ServletException(e);\n"
        + "    }\n"
        + "  }\n\n"

        + "  public ISecurity getSecurity() {\n"
        + "    return security;\n"        
        + "  };\n\n"
        + "}\n";
    

    return new SourceFile(project.projectName + "AbstractJspBase.java",
        javaCode);

  }; // ==========================

  static class Converter {
    public static String toJavaValue(FieldInfo field, String code) {
      Class<?> javaType = field.getJavaType();
      if (javaType.isPrimitive()) {
        // @todo Completar LLista
        String base = "( (" + code + " == null) || (" + code
            + ".trim().length() == 0) ) ? ";

        if (javaType.equals(Integer.TYPE)) {
          return base + " 0 :Integer.parseInt(" + code + ")";
        }
        
        if (javaType.equals(Long.TYPE)) {
          return base + " 0 :Long.parseLong(" + code + ")";
        }

        if (javaType.equals(Short.TYPE)) {
          return base + " 0 :Short.parseShort(" + code + ")";
        }

        if (javaType.equals(Double.TYPE)) {
          return base + " 0.0 :Double.parseDouble(" + code + ")";
        }

        if (javaType.equals(Float.TYPE)) {
          return base + " 0.0f :Float.parseFloat(" + code + ")";
        }

        if (javaType.equals(Boolean.TYPE)) {
          // return base + " false :Boolean.parseBoolean(" + code + ")";
          return base + " false : true";
        }
        return "Unknown primitive type " + javaType;
      }

      if (javaType.equals(Date.class)) {
        return "("
            + code
            + " == null || "
            + code
            + ".trim().equals(\"\") )? null : new java.sql.Date(" +
            		"getSimpleDateFormat().parse("
            + code + ").getTime())";
      }

      if (javaType.equals(Timestamp.class)) {
        return "("
            + code
            + " == null || "
            + code
            + ".trim().equals(\"\") )? null : new java.sql.Timestamp(" +
            		"getSimpleDateTimeFormat().parse("
            + code + ").getTime())";
      }

      if (javaType.equals(Time.class)) {
        return "("
            + code
            + " == null || "
            + code
            + ".trim().equals(\"\"))? null : new java.sql.Time(" +
            		"getSimpleTimeFormat().parse("
            + code + ").getTime())";
      }

      if (javaType.equals(String.class)) {
        if (field.isNotNullable) {
          return "( (" + code + " == null) ? null :" + code + ")";
        } else {
          // Pot ser null
          return "( (" + code + " == null) || (" + code
              + ".equals(\"\") ) ? null :" + code + ")";
        }
      }

      if (javaType.equals(java.math.BigDecimal.class)
          || javaType.equals(java.math.BigInteger.class)
          || javaType.equals(Byte.class) || javaType.equals(Short.class)
          || javaType.equals(Integer.class) || javaType.equals(Long.class)
          || javaType.equals(Double.class) || javaType.equals(Float.class)) {
        return "(" + code + " == null || " + code
            + ".trim().equals(\"\") )? null : new " + javaType.getName() + "("
            + code + ")";
      }

      return "UNKNOWN TYPE " + javaType + " TO CONVERT FROM STRING(" + code
          + ") TO JAVA";
    }

    public static String toStringValue(Class<?> javaType, String code,
        ModeWeb mode) {

      if (javaType.isPrimitive()) {
        return "String.valueOf(" + code + ")";
      }

      if (javaType.equals(java.sql.Date.class)) {
        return "("
            + code
            + "== null)? "
            + ((ModeWeb.LIST == mode) ? NULL_IMG : "\"\"")
            + " : getSimpleDateFormat()." +
            		"format(new java.util.Date(" + code + ".getTime()))";
      }

      if (javaType.equals(java.sql.Timestamp.class)) {
        return "("
            + code
            + "== null)? "
            + ((ModeWeb.LIST == mode) ? NULL_IMG : "\"\"")
            + " : getSimpleDateTimeFormat()." +
            		"format(new java.util.Date(" + code + ".getTime()))";
      }

      if (javaType.equals(java.sql.Time.class)) {
        return "("
            + code
            + "== null)? "
            + ((ModeWeb.LIST == mode) ? NULL_IMG : "\"\"")
            + " :getSimpleTimeFormat().format(new java.util.Date("
            + code + ".getTime()))";
      }

      if (javaType.equals(String.class)) {
        if (mode == ModeWeb.LIST) {
          return "(" + code + "==null)? " + NULL_IMG + " : " + code;
        } else {
          return "(" + code + "==null)? \"\" : " + code;
        }
      }

      if (javaType.equals(java.math.BigDecimal.class)
          || javaType.equals(Double.class) || javaType.equals(Float.class)) {
        return "(" + code + "==null)? "
            + ((ModeWeb.LIST == mode) ? NULL_IMG : "\"\"") + " : " + code
            + ".toString()";
      }

      if (javaType.equals(java.math.BigInteger.class)
          || javaType.equals(java.math.BigDecimal.class)
          || javaType.equals(Byte.class) || javaType.equals(Short.class)
          || javaType.equals(Long.class) || javaType.equals(Integer.class)
          || javaType.equals(Double.class) || javaType.equals(Float.class)) {
        return "(" + code + "==null)? "
            + ((ModeWeb.LIST == mode) ? NULL_IMG : "\"\"") + " : " + code
            + ".toString()";
      }

      return "UNKNOWN TYPE " + javaType + " TO CONVERT FROM JAVA(" + code
          + ") TO STRING";
    }

  }; // Final de classe Converter

  public static class Button {
    private final String name;
    private final String javascript;

    private Button(String name, String javascript) {
      super();
      this.name = name;
      this.javascript = javascript;
    }

    public String getName() {
      return name;
    }

    public String getJavascript() {
      return javascript;
    }

  }

}; // Final classe WebGenerator
